//go:build !chaingen
// +build !chaingen

// Code generated by chaingen. DO NOT EDIT.

package sql_builder

import (
	"fmt"
	"github.com/AnatolyRugalev/chaingen/examples/sql_builder/offset"
	"golang.org/x/tools/go/packages"
	"log"
)

// Where sets SQL condition
func (s SQLBuilder) Where(condition string) SQLBuilder {
	s.W = s.W.Where(condition)
	return s
}

// Limit sets the limit
// This is a second line of the comment
func (s SQLBuilder) Limit(limit int) SQLBuilder {
	s.O = s.O.Limit(limit)
	return s
}

// GetLimit returns the limit
func (s SQLBuilder) GetLimit() error {
	return s.wrapper(s.O.GetLimit())
}

func (s SQLBuilder) ChainMethodWithExternalType(param1 *log.Logger, param2 packages.Module) SQLBuilder {
	s.O = s.O.ChainMethodWithExternalType(param1, param2)
	return s
}

func (s SQLBuilder) FinalizerWithExternalType(param1 fmt.Formatter, param2 packages.Package) packages.Package {
	return s.O.FinalizerWithExternalType(param1, param2)
}

func (s SQLBuilder) VariadicMethod(params ...string) SQLBuilder {
	s.O = s.O.VariadicMethod(params...)
	return s
}

// Offset sets the offset param
func (s SQLBuilder) Offset(offset int) SQLBuilder {
	s.O = s.O.Offset(offset)
	return s
}

func (s SQLBuilder) GetOffset() int {
	return s.O.GetOffset()
}

// Finalizer is a useless finalizer that returns pointer to the builder
func (s SQLBuilder) Finalizer() *offset.OffsetBuilder {
	return s.O.Finalizer()
}
